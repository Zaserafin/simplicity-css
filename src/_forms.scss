// Form controls
// TODO: Add default value to all use-variables
// =================================================

select,
textarea,
input:not([type]),
input[type="color"],
input[type="date"],
input[type="time"],
input[type="datetime"],
input[type="datetime-local"],
input[type="email"],
input[type="month"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="url"],
input[type="week"] {
  appearance: #{use-css-variable(control-appearance)};
  background-color: #{use-css-variable(control-bg)};
  font-family: inherit;
  font-size: #{use-css-variable(control-font-size)};
  color: inherit;
  border-color: #{use-css-variable(control-border-color)};
  border-width: #{use-css-variable(control-border-width)};
  border-style: #{use-css-variable(control-border-style)};
  border-radius: #{use-css-variable(control-border-radius)};
  outline: 0;
  box-sizing: inherit;
  width: #{use-css-variable(control-width)};
  padding: #{use-css-variable(control-padding)};
  margin: #{use-css-variable(control-margin)};
  letter-spacing: 1px !important;

  &::placeholder {
    color: #{use-css-variable(secondary)};
  }

  &:focus {
    border-color: #{use-css-variable(control-focus-color)};
    box-shadow: #{use-css-variable(control-focus-shadow)};
  }

  &.invalid {
    border-color: #{use-css-variable(error-color)};
  }

  &.valid {
    border-color: #{use-css-variable(success)};
  }

  &:has(+ .error) {
    margin-bottom: 0;
  }
}

.error {
  display: block;
  margin: #{use-css-variable(error-margin)};
  color: #{use-css-variable(error-color)};
  font-weight: #{use-css-variable(error-weight)};
}

input[type="color"] {
  width: #{use-css-variable(color-width)};
  padding: 0 #{use-css-variable(color-padding)} !important;
}

input[type="range"] {
  width: #{use-css-variable(control-range-width)};
  height: #{use-css-variable(control-range-height)};
  padding: 0;
  appearance: #{use-css-variable(control-appearance)};
  outline: none;
  background-color: #{use-css-variable(control-bg)};
  border-color: #{use-css-variable(control-border-color)};
  border-width: #{use-css-variable(control-border-width)};
  border-style: #{use-css-variable(control-border-style)};
  border-radius: #{use-css-variable(control-border-radius)};

  &::-webkit-slider-thumb {
    appearance: #{use-css-variable(control-appearance)};
    width: #{use-css-variable(control-range-thumb-width)};
    height: #{use-css-variable(control-range-thumb-height)};
    background: #{use-css-variable(primary)} !important;
    border-radius: #{$border-radius-infinite};
    cursor: pointer;
  }

  &::-moz-range-thumb {
    width: #{use-css-variable(control-range-thumb-width)};
    height: #{use-css-variable(control-range-thumb-height)};
    background: #{use-css-variable(primary)} !important;
    border-radius: #{$border-radius-infinite};
    cursor: pointer;
  }
}

select {
  background: #{use-css-variable(select-indicator)} center right no-repeat;
  padding-right: #{use-css-variable(select-padding-right)};

  &[multiple] {
    background: none;
    height: auto;
  }
}

textarea {
  min-height: #{use-css-variable(textarea-min-height)};
  max-height: #{use-css-variable(textarea-max-height)};
  resize: #{use-css-variable(textarea-resize)} !important;
}

.label,
label,
legend {
  display: block;
  font-size: #{use-css-variable(label-font-size)};
  font-weight: #{use-css-variable(label-font-weight)};
  margin-bottom: #{use-css-variable(label-margin)};

  &.inline {
    display: inline-block !important;
    font-weight: normal;
    margin-left: #{use-css-variable(label-margin)};
  }
}

fieldset {
  border-width: #{use-css-variable(fieldset-border-width)};
  padding: #{use-css-variable(fieldset-padding)};
  margin: #{use-css-variable(fieldset-margin)};
}

input[type="checkbox"],
input[type="radio"] {
  display: inline-block;
  width: #{use-css-variable(checkbox-size)};
  height: #{use-css-variable(checkbox-size)};
  margin: auto 0;
}

.floating-label {
  position: relative;
  margin: 0;
  padding: 0;

  label {
    position: absolute;
    top: #{use-css-variable(label-still-top)};
    left: #{use-css-variable(label-still-left)};
    transition: #{use-css-variable(label-floating-transition)};
  }

  input::placeholder {
    color: transparent;
  }

  @if $floating-show-placeholder == true {
    &:has(input:focus) {
      input::placeholder {
        color: #{use-css-variable(secondary)};
      }
    }
  }

  &:has(input:focus) label,
  &:has(input:not(:placeholder-shown)) label {
    font-size: #{use-css-variable(label-floating-font-size)};
    top: #{use-css-variable(label-floating-left)};
  }
}
