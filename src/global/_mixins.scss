@use "sass:color";
@use "sass:map";

// =================================================
// Button Mixins
// Description: Mixins for generating button styles based on the project's
// color scheme and size variables, following simplicity-css guidelines.
// =================================================

// Mixin: generate-button-colors
// Description: Generates CSS variables for button background, text color,
// and hover states based on the provided color.
// Parameters:
//   - $color-name: The color name.
//   - $color-value: The base color value.
// =================================================
@mixin generate-button-colors($color-name, $color-value) {
  // Generate CSS variables for default, hover, and disabled states
  #{generate-css-variable-name(btn-bg)}: #{use-css-variable(
      #{$color-name}-bg,
      $color-value
    )};
  #{generate-css-variable-name(btn-color)}: #{use-css-variable(
      #{$color-name}-color,
      color-contrast($color-value)
    )};
  #{generate-css-variable-name(btn-hover-bg)}: #{use-css-variable(
      #{$color-name}-hover-bg,
      tint-color($color-value, 20%)
    )};
  #{generate-css-variable-name(btn-hover-color)}: #{use-css-variable(
      #{$color-name}-hover-color,
      color-contrast(tint-color($color-value, 20%))
    )};
  #{generate-css-variable-name(btn-disabled-bg)}: #{use-css-variable(
      #{$color-name}-disabled-bg,
      color.adjust($color-value, $lightness: 40%)
    )};
  #{generate-css-variable-name(btn-disabled-color)}: #{use-css-variable(
      #{$color-name}-disabled-color,
      gray
    )};
}

// Mixin: generate-button-size
// Description: Applies height, padding, and font-size for buttons.
// Parameters:
//   - $size: A map containing the height, padding, and font-size for the button.
// =================================================
@mixin generate-button-size($size-name, $size-values) {
  // Generate CSS variables for height, padding, and font-size
  #{generate-css-variable-name(btn-height)}: #{map.get($size-values, height)};
  #{generate-css-variable-name(btn-padding)}: #{map.get($size-values, padding)};
  #{generate-css-variable-name(btn-font-size)}: #{map.get(
      $size-values,
      font-size
    )};
}

// Mixin: responsive-content
// Description: Place the content within a media query
//              or in the root selector if its the smallest breakpoint
// Parameters:
//   - $name: The name of the target breakpoint.
//   - $breakpoints: A list of breakpoints, by default uses $grid-breakpoints.
// =================================================
@mixin responsive-content($name, $breakpoints: $grid-breakpoints) {
  $min: get-breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Mixin: generate-animation
// Description: Generates the styles for an animation, with configurable speed and timing.
// Parameters:
//   - $animation-name: The name of the animation.
//   - $duration-factor: A multiplier for the base animation speed (default: 1).
//   - $timing: The timing function for the animation (default: linear).
// =================================================
@mixin generate-animation(
  $animation-name,
  $duration-factor: 1,
  $timing: linear
) {
  animation-name: #{$animation-name};
  animation-duration: calc(
    #{use-css-variable(animation-speed, $animation-base-speed)} * #{$duration-factor}
  ) !important;
  animation-iteration-count: infinite;
  animation-timing-function: #{$timing};
}

// Mixin: generate-utility
// Description: Parses utilities array to CSS classes and styles
// Applies responsive breakpoints
// Parameters:
//    - $utilities: The array of utilities
// =================================================
@mixin generate-utility($utilities) {
  @each $key, $utility in $utilities {
    $properties: map.get($utility, properties);
    $selector: map.get($utility, selector);
    $values: map.get($utility, values);

    @each $breakpoint in map.keys($grid-breakpoints) {
      @include responsive-content($breakpoint, $grid-breakpoints) {
        @each $index, $value in $values {
          $breakpoint-suffix: get-breakpoint-suffix(
            $breakpoint,
            $grid-breakpoints
          );

          .#{$selector}#{$breakpoint-suffix}-#{$index} {
            @each $property in $properties {
              #{$property}: $value;
            }
          }
        }
      }
    }
  }
}
