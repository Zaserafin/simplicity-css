@use "sass:color";
@use "sass:math";

// ====================================================
// Function: convert-to-rgb
// Description: Converts a color value to its red, green, and blue (RGB) components.
// Parameters:
//   - $value: The color to be converted (supports hex, rgb, or named colors).
// Returns: A comma-separated list of the red, green, and blue values of the color in that order.
// ====================================================
@function convert-to-rgb($value) {
  @return color.channel($value, "red", $space: rgb), color.channel($value, "green", $space: rgb),
    color.channel($value, "blue", $space: rgb);
}

// ====================================================
// Function: generate-css-variable-name
// Description: Generates the name of a CSS variable with an optional prefix.
// Parameters:
//   - $name: The name of the CSS variable to generate.
//   - $prefix (optional): The prefix for the CSS variable. Defaults to the global $css-var-prefix.
// Returns: A string representing the CSS variable name in the format --[prefix]-[name].
// ====================================================
@function generate-css-variable-name($name, $prefix: $css-var-prefix) {
  @return --#{$prefix}-#{$name};
}

// ====================================================
// Function: use-css-variable
// Description: Generates a var() usage string for a CSS variable with an optional prefix.
// Parameters:
//   - $name: The name of the CSS variable to use.
//   - $prefix (optional): The prefix for the CSS variable. Defaults to the global $css-var-prefix.
// Returns: A string representing the var() function with the CSS variable in use.
// ====================================================
@function use-css-variable($name, $default-value: null, $prefix: $css-var-prefix) {
  @return var(#{generate-css-variable-name($name, $prefix)}, #{$default-value});
}

// ====================================================
// Function: tint-color
// Description: Lightens a given color by mixing it with white.
// Parameters:
//   - $color: The base color to be lightened.
//   - $percentage: The percentage (0-100%) of white to mix into the color.
// Returns: A lighter version of the provided color.
// ====================================================
@function tint-color($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// ====================================================
// Function: shade-color
// Description: Darkens a given color by mixing it with black.
// Parameters:
//   - $color: The base color to be darkened.
//   - $percentage: The percentage (0-100%) of black to mix into the color.
// Returns: A darker version of the provided color.
// ====================================================
@function shade-color($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// ====================================================
// Function: contrast-color
// Description: Determines whether white or black provides better contrast
//              for the provided color to improve text readability.
// Parameters:
//   - $color: The base color to evaluate for contrast.
// Returns: Either white or black variables value, depending on which provides better contrast
//          for the provided color.
// ====================================================
@function color-contrast($color) {
  // Normalize the RGB components to a scale of 0 to 1
  $r: math.div(color.channel($color, "red", $space: rgb), 255);
  $g: math.div(color.channel($color, "green", $space: rgb), 255);
  $b: math.div(color.channel($color, "blue", $space: rgb), 255);

  // Calculate the relative luminance of the color based on the sRGB color model
  $luminance: 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;

  // Calculate contrast with white and black
  $contrast-white: abs($luminance - 1);
  $contrast-black: $luminance;

  // Return the color that provides the better contrast
  @if $contrast-white >= $contrast-black {
    @return $white;
  } @else {
    @return $black;
  }
}

// ====================================================
// Function: get-breakpoint-min
// Description: Returns the corresponding breakpoint value
//              or null if it is the lowest.
// Parameters:
//   - $name: The name of the target breakpoint.
//   - $breakpoints: A list of allowed breakpoints.
// Returns: The breakpoint data or null if its smallest breakpoint.
// ====================================================
@function get-breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @if type-of($min) != "number" {
    @warn "Breakpoint '#{$name}' not found in provided breakpoints map.";
    @return null;
  }
  @return if($min != 0, $min, null);
}

// ====================================================
// Function: get-breakpoint-suffix
// Description: Returns the name of the breakpoint
//              or null if it is the smallest
// Parameters:
//   - $name: The name of the target breakpoint.
//   - $breakpoints: A list of allowed breakpoints.
// Returns: The name of the target breakpoint
//          or empty string if its smallest breakpoint.
// ====================================================
@function get-breakpoint-suffix($name, $breakpoints) {
  @return if(get-breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
